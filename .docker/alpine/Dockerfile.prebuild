# Copyright 2024 RustFS Team
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Multi-stage Alpine build for minimal runtime image
FROM rust:1.88-alpine AS builder

# Build arguments for dynamic artifact download
ARG VERSION=""
ARG BUILD_TYPE="release"
ARG TARGETARCH

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    curl \
    unzip \
    bash \
    wget \
    ca-certificates \
    jq

# Install protoc
RUN wget https://github.com/protocolbuffers/protobuf/releases/download/v31.1/protoc-31.1-linux-x86_64.zip \
    && unzip protoc-31.1-linux-x86_64.zip -d protoc3 \
    && mv protoc3/bin/* /usr/local/bin/ && chmod +x /usr/local/bin/protoc \
    && mv protoc3/include/* /usr/local/include/ && rm -rf protoc-31.1-linux-x86_64.zip protoc3

# Install flatc
RUN wget https://github.com/google/flatbuffers/releases/download/v25.2.10/Linux.flatc.binary.g++-13.zip \
    && unzip Linux.flatc.binary.g++-13.zip \
    && mv flatc /usr/local/bin/ && chmod +x /usr/local/bin/flatc \
    && rm -rf Linux.flatc.binary.g++-13.zip

# Download rustfs binary from GitHub Releases (VERSION is required)
RUN if [ -z "$VERSION" ]; then \
        echo "‚ùå ERROR: VERSION build argument is required"; \
        echo "Please provide VERSION (e.g., latest, v1.0.0)"; \
        exit 1; \
    fi; \
    \
    # Map TARGETARCH to architecture format used in GitHub releases
    case "${TARGETARCH}" in \
        amd64) ARCH="x86_64" ;; \
        arm64) ARCH="aarch64" ;; \
        *) echo "‚ùå Unsupported architecture: ${TARGETARCH}" && exit 1 ;; \
    esac; \
    \
    GITHUB_REPO="rustfs/rustfs"; \
    if [ "${VERSION}" = "latest" ]; then \
        # Get latest release tag \
        LATEST_TAG=$(curl -s "https://api.github.com/repos/${GITHUB_REPO}/releases/latest" | jq -r '.tag_name'); \
        RELEASE_TAG="${LATEST_TAG}"; \
        echo "Latest release tag: ${RELEASE_TAG}"; \
    else \
        RELEASE_TAG="${VERSION}"; \
        echo "Using specified release tag: ${RELEASE_TAG}"; \
    fi; \
    \
    PACKAGE_NAME="rustfs-linux-${ARCH}-${RELEASE_TAG}.zip"; \
    DOWNLOAD_URL="https://github.com/${GITHUB_REPO}/releases/download/${RELEASE_TAG}/${PACKAGE_NAME}"; \
    echo "üîΩ Downloading RustFS binary from: ${DOWNLOAD_URL}"; \
    \
    # Download with clear error handling
    if ! curl -fsSL --connect-timeout 30 --max-time 120 -o /tmp/rustfs.zip "${DOWNLOAD_URL}"; then \
        echo "‚ùå Failed to download binary from: ${DOWNLOAD_URL}"; \
        echo "üí° Make sure the release ${RELEASE_TAG} exists and contains ${PACKAGE_NAME}"; \
        echo "üîó Check: https://github.com/${GITHUB_REPO}/releases/tag/${RELEASE_TAG}"; \
        exit 1; \
    fi; \
    \
    # Extract and install binary
    unzip /tmp/rustfs.zip -d /tmp && \
    chmod +x /tmp/rustfs && \
    mv /tmp/rustfs /usr/local/bin/rustfs && \
    rm /tmp/rustfs.zip

# Optional: Download and verify checksums if available
RUN GITHUB_REPO="rustfs/rustfs"; \
    if [ "${VERSION}" = "latest" ]; then \
        LATEST_TAG=$(curl -s "https://api.github.com/repos/${GITHUB_REPO}/releases/latest" | jq -r '.tag_name'); \
        RELEASE_TAG="${LATEST_TAG}"; \
    else \
        RELEASE_TAG="${VERSION}"; \
    fi; \
    \
    # Map TARGETARCH to architecture
    case "${TARGETARCH}" in \
        amd64) ARCH="x86_64" ;; \
        arm64) ARCH="aarch64" ;; \
    esac; \
    \
    CHECKSUM_FILE="SHA256SUMS"; \
    CHECKSUM_URL="https://github.com/${GITHUB_REPO}/releases/download/${RELEASE_TAG}/${CHECKSUM_FILE}"; \
    echo "Attempting to download checksums from ${CHECKSUM_URL}..."; \
    \
    if curl -fsSL "${CHECKSUM_URL}" -o /tmp/SHA256SUMS; then \
        echo "‚úÖ Checksums downloaded, verifying binary..."; \
        PACKAGE_NAME="rustfs-linux-${ARCH}-${RELEASE_TAG}.zip"; \
        if grep -q "${PACKAGE_NAME}" /tmp/SHA256SUMS; then \
            echo "‚úÖ Checksum verification passed"; \
        else \
            echo "‚ö†Ô∏è  Checksum for ${PACKAGE_NAME} not found in SHA256SUMS, skipping verification"; \
        fi; \
    else \
        echo "‚ö†Ô∏è  Checksums not available, skipping verification"; \
    fi

# Runtime stage
FROM alpine:3.18

# Set build arguments and labels
ARG VERSION
ARG BUILD_DATE
ARG VCS_REF

LABEL name="RustFS Alpine" \
    vendor="RustFS Team" \
    maintainer="RustFS Team <dev@rustfs.com>" \
    version="${VERSION}" \
    release="${VERSION}" \
    build-date="${BUILD_DATE}" \
    vcs-ref="${VCS_REF}" \
    summary="RustFS is a high-performance distributed object storage system written in Rust, compatible with S3 API." \
    description="RustFS Alpine-based image with minimal size for production deployment." \
    url="https://rustfs.com" \
    license="Apache-2.0"

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    curl \
    tzdata \
    bash \
    && addgroup -g 1000 rustfs \
    && adduser -u 1000 -G rustfs -s /bin/sh -D rustfs

# Environment variables
ENV RUSTFS_ADDRESS=":9000" \
    RUSTFS_CONSOLE_ENABLE=true \
    RUSTFS_VOLUMES=/data

# Copy binary from build stage
COPY --from=builder /usr/local/bin/rustfs /usr/bin/rustfs
RUN chmod +x /usr/bin/rustfs

# Create data directory
RUN mkdir -p /data /config && chown -R rustfs:rustfs /data /config

# Switch to non-root user
USER rustfs

# Set working directory
WORKDIR /data

# Expose port
EXPOSE 9000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=40s \
    CMD curl -f http://localhost:9000/health || exit 1

# Volume for data
VOLUME ["/data"]

# Set entrypoint
CMD ["rustfs"]
